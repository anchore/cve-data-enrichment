{
  "additionalMetadata": {
    "cna": "github_m",
    "cveId": "CVE-2024-45311",
    "description": "Quinn is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol. As of quinn-proto 0.11, it is possible for a server to `accept()`, `retry()`, `refuse()`, or `ignore()` an `Incoming` connection. However, calling `retry()` on an unvalidated connection exposes the server to a likely panic in the following situations:  1. Calling `refuse` or `ignore` on the resulting validated connection, if a duplicate initial packet is received. This issue can go undetected until a server's `refuse()`/`ignore()` code path is exercised, such as to stop a denial of service attack. 2. Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesn't exhaust connection IDs is received. This issue can go undetected if clients are well-behaved. The former situation was observed in a real application, while the latter is only theoretical.",
    "reason": "Added CPE configurations because not yet analyzed by NVD.",
    "references": [
      "https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213",
      "https://github.com/quinn-rs/quinn/commit/e01609ccd8738bd438d86fa7185a0f85598cb58f",
      "https://github.com/quinn-rs/quinn/security/advisories/GHSA-vr26-jcq5-fjj8"
    ]
  },
  "adp": {
    "affected": [
      {
        "collectionURL": "https://crates.io",
        "cpes": [
          "cpe:2.3:a:quinn_project:quinn:*:*:*:*:*:rust:*:*"
        ],
        "packageName": "quinn",
        "packageType": "rust-crate",
        "product": "quinn",
        "repo": "https://github.com/quinn-rs/quinn",
        "vendor": "quinn-rs",
        "versions": [
          {
            "lessThan": "0.11.7",
            "status": "affected",
            "version": "0.11.0",
            "versionType": "custom"
          }
        ]
      }
    ],
    "providerMetadata": {
      "orgId": "00000000-0000-4000-8000-000000000000",
      "shortName": "anchoreadp"
    }
  }
}